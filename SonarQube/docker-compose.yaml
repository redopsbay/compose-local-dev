version: "3"
services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    command:
      - --api.insecure=true
      - --providers.docker
      - --entrypoints.http.address=:80
      - --log.level=DEBUG
    # Expose port `80` on your machine
    ports:
      - "80:80"
    volumes: # give traefik-proxy access into docker.sock
      - /var/run/docker.sock:/var/run/docker.sock
  sonarqube:
    image: sonarqube:community
    hostname: sonarqube
    container_name: sonarqube
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarqube.service=sonarqube
      - traefik.http.services.sonarqube.loadbalancer.server.port=9000
      - traefik.http.routers.sonarqube.rule=Host(`sonarqube.redopsbay.local`)
      - traefik.http.routers.sonarqube.entrypoints=http
    depends_on:
      - db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
  db:
    image: postgres:13
    hostname: postgresql
    container_name: postgresql
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql:
  postgresql_data: